version: "3.1"
services: 
  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_DB: cda_busqueda
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Named volume for persistent data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Mount the SQL script for initialization
    networks:
      - app-network

  scrapper:
    container_name: python_scrapper
    build:
      context: ./
      dockerfile: Dockerfile
    depends_on:
      - postgres
    networks:
      - app-network

  postgrest:
    image: postgrest/postgrest
    container_name: postgrest
    environment:
      PGRST_DB_URI: postgres://postgres:mysecretpassword@postgres:5432/cda_busqueda
      PGRST_DB_SCHEMA: public
      PGRST_DB_ANON_ROLE: anon
    depends_on:
      - postgres
    ports:
      - "3000:3000"  # Expose PostgREST on port 3000
    networks:
      - app-network

  frontend:
    container_name: nextjs_frontend
    build:
      context: .  # Changed from ./frontend to .
      dockerfile: ./frontend/Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - NEXT_PUBLIC_API_URL=http://localhost:3000
    depends_on:
      - postgrest
    networks:
      - app-network
    restart: unless-stopped
  
  backend:
    container_name: fastapi_backend
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - postgrest
    networks:
      - app-network
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=us-east-1

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:  # Define named volume here, without any additional paths or spaces